# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build Vex and Examples

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Allows manual triggering from GitHub UI

jobs:
  lint:
    runs-on: ubuntu-latest
    name: clang-tidy
    steps:
    - uses: actions/checkout@v4
    - name: Install clang tools
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tidy \
          libvulkan-dev \
          vulkan-validationlayers \
          vulkan-tools \
          libwayland-dev \
          wayland-protocols \
          libxkbcommon-dev \
          libwayland-client0 \
          libwayland-cursor0 \
          libwayland-egl1 \
          libwayland-server0 \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libxext-dev \
          libgl1-mesa-dev \
          extra-cmake-modules

    - name: Get all source files
      id: get-source-files
      run: |
        echo "source_files=$(find . -type f \( -name "*.cpp" -o -name "*.h" -o -name "*.hpp" -o -name "*.c" -o -name "*.cc" -o -name "*.cxx" \) | tr '\n' ' ')" >> $GITHUB_OUTPUT

    - name: Configure CMake for compilation database
      run: |
        cmake -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Run clang-tidy
      run: |
        # Run clang-tidy with warnings as errors
        TIDY_ERRORS=0
        for file in ${{ steps.get-source-files.outputs.source_files }}; do
            clang-tidy -p build $file || TIDY_ERRORS=$((TIDY_ERRORS+1))
        done
        if [ $TIDY_ERRORS -gt 0 ]; then
            echo "clang-tidy found $TIDY_ERRORS issues that need to be fixed"
            exit 1
        fi

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 4 configurations:
      # 1. <Windows, Debug and Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Windows, Debug and Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Debug and Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 4. <Linux, Debug and Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug, Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    name: ${{ matrix.os }} ${{ matrix.c_compiler }} ${{ matrix.build_type }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # GitHub Action's ubuntu image has a GCC which does not support <print> (added in GCC 13).
    - name: Install latest GCC
      if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'gcc'
      run: |
        # Add the ubuntu-toolchain-r/test PPA which provides newer GCC versions
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update
        
        # Find the latest GCC version available
        LATEST_GCC=$(apt-cache search 'gcc-[0-9]+' | grep -oP 'gcc-\K[0-9]+' | sort -rn | head -n1)
        echo "Latest GCC version found: gcc-$LATEST_GCC"
        
        # Install the latest GCC version
        sudo apt-get install -y gcc-$LATEST_GCC g++-$LATEST_GCC
        
        # Set the latest GCC as the default
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$LATEST_GCC 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$LATEST_GCC 100
        
        # Verify the version
        gcc --version
        g++ --version

    - name: Install Vulkan SDK (Windows)
      if: matrix.os == 'windows-latest'
      uses: humbletim/setup-vulkan-sdk@523828e49cd4afabce369c39c7ee6543a2b7a735
      with:
        vulkan-query-version: latest
        vulkan-components: Vulkan-Headers, Vulkan-Loader
        vulkan-use-cache: true

    - name: Install Vulkan SDK and Wayland (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libvulkan-dev \
          vulkan-validationlayers \
          vulkan-tools \
          libwayland-dev \
          wayland-protocols \
          libxkbcommon-dev \
          libwayland-client0 \
          libwayland-cursor0 \
          libwayland-egl1 \
          libwayland-server0 \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libxext-dev \
          libgl1-mesa-dev \
          extra-cmake-modules

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DVEX_BUILD_EXAMPLES=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Build Failure Reporting
      if: failure()
      run: |
        if [ -f ${{ steps.strings.outputs.build-output-dir }}/CMakeFiles/CMakeOutput.log ]; then
          echo "CMakeOutput.log:"
          cat ${{ steps.strings.outputs.build-output-dir }}/CMakeFiles/CMakeOutput.log
        fi
        if [ -f ${{ steps.strings.outputs.build-output-dir }}/CMakeFiles/CMakeError.log ]; then
          echo "CMakeError.log:"
          cat ${{ steps.strings.outputs.build-output-dir }}/CMakeFiles/CMakeError.log
        fi
      shell: bash
